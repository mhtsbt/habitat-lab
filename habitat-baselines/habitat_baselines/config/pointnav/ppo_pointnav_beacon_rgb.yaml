# @package _global_

# Note:  This is an example config, see habitat-baselines/habitat_baselines/config/pointnav/ppo_pointnav.yaml
# for better hyperparameters for actual training

defaults:
  - /benchmark/nav/pointnav: pointnav_habitat_beacon_rgb
  - /habitat_baselines: habitat_baselines_rl_config_base
  - _self_

habitat_baselines:
  trainer_name: "ddppo"
  torch_gpu_id: 0
  tensorboard_dir: "tb"
  video_dir: "video_dir"
  # To evaluate on all episodes, set this to -1
  test_episode_count: 10
  eval_ckpt_path_dir: "data/new_checkpoints"
  num_environments: 4
  checkpoint_folder: "data/new_checkpoints_rgb"
  num_updates: -1
  total_num_steps: 100e6
  log_interval: 25
  num_checkpoints: 100
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  load_resume_state_config: False


  eval:
    video_option: [ "disk", "tensorboard" ]

  rl:
    policy:
      name: "PointNavBaselinePolicy"

    ppo:
      # ppo params
      clip_param: 0.1
      ppo_epoch: 1
      num_mini_batch: 1
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 2.5e-4
      eps: 1e-5
      max_grad_norm: 0.5
      num_steps: 32
      hidden_size: 512
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: True
      use_linear_lr_decay: True
      reward_window_size: 50

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether the visual encoder backbone will be trained.
      train_encoder: True
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet50
      rnn_type: LSTM
      num_recurrent_layers: 2

